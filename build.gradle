import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
description = 'An entity events API. Not much more to it than that.'

repositories {
    maven {
        url "https://jitpack.io"
        content {
            includeGroupByRegex 'com\\.github\\..*'
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
    include modImplementation ("com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    include modImplementation ("blue.endless:jankson:${project.jankson_version}")
}

if (Boolean.valueOf(project.use_runtime_deps)) {
    dependencies {
        // DataBreaker applies a number of patches to eliminate the loading of data fixers
        // This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
        modRuntime "com.github.SuperCoder7979:databreaker:${project.databreaker_version}"
        // CaffeineMC optimizations
        modRuntime "com.github.caffeinemc:lithium-fabric:${project.lithium_version}"
        modRuntime "com.github.caffeinemc:phosphor-fabric:${project.phosphor_version}"
        modRuntime "com.github.caffeinemc:sodium-fabric:${project.sodium_version}"
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

task runTestmodClient(type: RunClientTask) {
    classpath sourceSets.testmod.runtimeClasspath
}

task runTestmodServer(type: RunServerTask) {
    classpath sourceSets.testmod.runtimeClasspath
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

// configure the maven publication
publishing {
    repositories {
        maven {
            def releaseRepo = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepo = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = project.ext.isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = rootProject.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = rootProject.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom {
                groupId = rootProject.group
                artifactId = project.name
                version = project.version

                name = project.name
                description = project.description
                url = 'https://speedbridgemc.github.io'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'ADudeCalledLeo'
                        name = 'Kfir Awad'
                        email = 'kfirawad@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/SpeedbridgeMC/entity-events.git'
                    developerConnection = 'scm:git:ssh://github.com:SpeedbridgeMC/entity-events.git'
                    url = 'https://github.com/SpeedbridgeMC/entity-events/tree/1.16'
                }
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

signing {
    sign publishing.publications
}
tasks.withType(Sign) {
    onlyIf { project.ext.isReleaseVersion }
}
